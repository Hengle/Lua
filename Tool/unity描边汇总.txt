

---------------------unity 描边汇总-------------------------

----文章1: https://blog.csdn.net/qq_39020624/article/details/77141916

1.1）手动在材质上描边（不推荐）
【优点】没有

1.2）根据视角和法线来秒表 dot(n.v); 
【优点】：适用性广，对复杂模型效果很好，对人物怪物场景复杂模型很实用；
【缺点】：cube效果不好

1.3) 法线外拓,这种方法也是在复杂面几何体上使用最多的方法
【优点】: 简单,方便,分分钟就能上描下描左描右描
【缺点】: 耗费资源，另外像cube等几何体会出现面与面无法交接的情况

1.4）offset偏移：较少用，因为会使本体模型产生一些轻微的面片变形
【优点】: 可以形成完全覆盖cube等类型的描边
【缺点】: 缺点也很明显，模型的片与片之间会产生轻微的变形

1.5) 色彩外拓:建立在法线外拓基础上进行的改进，利用顶点颜色去传递顶点法线
【优点】: 克服了cube几何体无法交接问题
【缺点】: 模型必须与上级原点重合。否则会产生描边偏移现象



-----文章2: https://blog.csdn.net/l773575310/article/details/78701756

原理:  添加额外相机（位置等信息等同原相机），将指定Layer的可见物体渲染出物体所占的面积，
 并把渲染的纹理存到一个临时渲染纹理（RenderTexture）中，再通过这个纹理扩展出外边，
最后将这个外边和原场景纹理混合即可。

步骤1：初始化配置额外相机
步骤2：渲染物体所占面积
步骤3：绘制外边与混合原场景



-----文章3：边缘光和outline轮廓描边 https://www.cnblogs.com/wonderKK/p/5054456.html


-----文章4：Shader实例:边缘发光和描边  http://www.cnblogs.com/joeshifu/p/5489727.html

1.边缘发光
思路：用视方向和法线方向点乘，模型越边缘的地方，它的法线和视方向越接近90度。点乘越接近0
那么用 1-减去上面点乘的结果，来作为颜色分量，来反映边缘颜色强弱。

2.两种方式

2.1）描边原理1
思路：两次渲染，第一次渲染背面，剔除正面，把模型顶点沿法线方向扩伸一定距离（用来表现描边的粗细）
第二次渲染，渲染正面，剔除背面

2.2）描边原理2
思路：两次渲染。第一次渲染背面，剔除正面。利用Offset指令，向离摄像机更近的方式偏移
第二次正常渲染物体（不剔除），（或者可以渲染正面，剔除背面）。


-----文章5：https://blog.csdn.net/llsansun/article/details/83744775

描边方式一般有两种，一种的模型边缘描边，一种的人物的转折点描边（这种需要用到卷轴）
在游戏中比较常用的就是模型边缘描边了











