

--------- 工具 -------------

1 检查内存工具: BoudsChecker,除了能够检查内存泄露，也能检查内存溢出问题

2 AppVerifier，专门用来检测那些用普通方法检测不出的意想不到的bug（比如内存溢出、错误句柄使用等）。而且AppVerifier使用非常简单，
只需要绑定需要测试的的应用程序，并且勾选测试项后保存，使用VS2005进行调试即可


--------- 格式 -------------

1 android:2d去掉mipmap，android使用ETC1,不支持alpha通道；ETC2是支持alpha通道，但需要opengl es3.0标准

2 android:可以采用ETC1或者PNG/JPEG格式

3 IOS: PVRTC压缩格式，纹理可以节省大量内存和读取速度快，但是图像质量会降低



--------- Mode -------------
1  合并使用同贴图的材质球，合并使用相同材质球的Mesh

2、角色的贴图和材质球只要一个，若必须多个则将模型离分离为多个部分；

3、当使用多角色时，将动画单独分离出来；

4、使用层距离来控制模型的显示距离；
　
5、阴影其实包含两方面阴暗和影子，建议使用实时影子时把阴暗效果烘焙出来，不要使用灯光来调节光线阴暗。
　　
6、少用像素灯和使用像素灯的Shader；
　
7、如果硬阴影可以解决问题就不要用软阴影，并且使用不影响效果的低分辨率阴影；
　
8、实时阴影很耗性能，尽量减小产生阴影的距离；

9、允许的话在大场景中使用线性雾，这样可以使远距离对象或阴影不易察觉，因此可以通过减小相机和阴影距离来提高性能；
　　
10、使用圆滑组来尽量减少模型的面数；
　　
11、项目中如果没有灯光或对象在移动那么就不要使用实时灯光；
　　
12、水面、镜子等实时反射/折射的效果单独放在Water图层中，并且根据其实时反射/折射的范围来调整；
　　
13、碰撞对效率的影响很小，但碰撞还是建议使用Box、Sphere碰撞体；
　　
14、建材质球时尽量考虑使用Substance；
　　
15、尽量将所有的实时反射/折射（如水面、镜子、地板等等）都集合成一个面；
　　
16、假反射/折射没有必要使用过大分辨率，一般64*64就可以，不建议超过256*256；
　　
17、需要更改的材质球，建议实例化一个，而不是使用公共的材质球；
　　
18、将不须射线或碰撞事件的对象置于IgnoreRaycast图层；
　　
19、将水面或类似效果置于Water图层
　　
20、将透明通道的对象置于TransparentFX图层；
　　
21、养成良好的标签（Tags）、层次（Hieratchy）和图层（Layer）的条理化习惯，将不同的对象置于不同的标签或图层，三者有效的结合将很方便的按名称、类别和属性来查找；
　　
22、通过Stats和Profile查看对效率影响最大的方面或对象，或者使用禁用部分模型的方式查看问题到底在哪儿；
　　
23、使用遮挡剔除（Occlusion Culling）处理大场景，一种较原生的类LOD技术，并且能够“分割”作为整体的一个模型。
      
24、骨骼系统不要使用太多；






