
1  GetHashCode作用 

最后你可能有些疑惑为什么不直接用Equals非得搞个GetHashCode在前面先判断一下？
这个是由于Equals方法必须把两个对象搞清楚是等于 还是不等于，所以可能效率不是最优的
（况且Object.Equals通常包含类型的转换，这个可以参考IEquatable或 IEqualityComparer，他们支持泛型），
而GetHashCode不需要绝对弄清楚是否相等所以可以优化下效率。举个最简单的例子，比较两 个人是不是完全一样（一样的话代表是他的克隆人），
Equals会一个细胞接一个细胞得比较，而GetHashCode可以通过判断性别，长相，声音…… 快速得进行判断。
所以先用GetHashCode会很快的判断出许多不同的人，当然如果GetHashCode返回True（遇到了双胞胎或者克隆人）， 
再用Equals进行彻底的比较。


2 确定行和列

2.1 用世界坐标的 x范围是（0，width*列），是用世界坐标来判定

2.2 鼠标点击的世界坐标 - animal根节点的世界坐标；鼠标的input.mouseposition是左下

2.2 屏幕坐标（0，0）（screenwidth,screenheight）；2.2鼠标的位置就是屏幕坐标的位置

2.3 其实应该也可以用屏幕坐标来换算

--------------------------------------------------------------------------------------------------------------------------------------------------------------

3 Hashset : 天生为了提高查找效率，比如在一大堆数据中查找x

3.1 LinkedList低得可怕，ArrayList如果不知道序号同样需要遍历一遍

3.2 hashCode 散列码，在object中有一个hashcode即是GetHashCode() 得到散列码，基本每个对象都有一个，
其值就是对象的内存地址。但也有一些对象的散列码是相同，比如string对象，它的散列码是对内容的计算结果

3.3 对于strin的散列码，是对内容计算的结果，比如a="ok",b="ok",散列码就相同，因为a,b的散列码是对内容的计算结果,hash=定值 + charAt(i),i是位置

3.4 所以对于string的对象，虽然内存地址是不一样的，但是散列码确是一样的

3.5 hashset的add机制：1 如果在一个地址下有值，则不再重复加入 2 如果达到默认的链表长度比如75，则重新开辟32位的三列结果重新再散列

3.6 所以提高查找：直接根据数据的散列码和散列表的数组大小计算除余后，就得到了所在数组的位置，然后再查找链表中是否有这个数据即可。即是
非常快速的找到序号index，再找到这个内存对应位置的值

3.7 当这个内存单元中的值很小，查找就非常快速了，如果大还是需要遍历也会影响，但比其他方式要快

3.8 hashCode方法必须与equals方法必须兼容如果我们自己定义了一个类，想对这个类的大量对象组织成散列表结构便于查找。
有一点一定要注意：就是hashCode方法必须与equals方法向兼容

3.9 上一点，比如在hashset存储的对象是a，其中a提供equals是比较string的key，比如（111,"张"）（111,"李"），比较的是111的话那么就会多次重复插入这值，
就不好了，所以string也一定要提供equals的方法是对比的是内容

3.10 HashSet不能重复存储equals相同的数据 。原因就是equals相同，数据的散列码也就相同（hashCode必须和equals兼容）。
大量相同的数据将存放在同一个散列单元所指向的链表中，造成严重的散列冲突，对查找效率是灾难性的。

3.11 HashSet的存储是无序的 ，没有前后关系，他并不是线性结构的集合。

3.12 hashCode必须和equals必须兼容， 这也是为了第3.10那条

3.13 所以可以用for(Iterator iter = set.iterator();iter.hasNext();)，也可以用foreach


4 LevelLogicController 关卡控制器

5 HashSet<T>类为 UnionWith方法：修改当前 HashSet<T> 对象以使其包含存在于该对象中、指定集合中或两者中的所有元素。
   即是：xx.UnionWith(other ); other里面有xx没有的元素也添加进xx容器内



































