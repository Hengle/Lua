
-----------------1简介----------------
GPU：并行计算，无法拥有cpu强大的逻辑运算能力
CPU:   cache,logic,处理单元比GPU少
unity中有三种shader：
surface shader(unity的一种包装最后还是会生成vertex and fragment shader)；
vertex and fragment shader(最主要的)；
fixed function shader（固定管线的shader，比如简单的光照和采样）

-----------------4基本结构----------------
shader "name"{
 [Properties] -- 可省略
 SubShaders --至少1个
 [FallBack] -- 可省略
}

 SubShaders -- 有且必须有一个，显卡每一次只会选择一个subshader去渲染；
                   如果当前硬件不能支持第一个subshader则依次往下选择；若subshader都不支持
                   则就会fallback回滚到系统的一个默认的shader
 
 
-----------------5-6固定管线----------------

1 fixed function shader: 固定功能的，硬件能执行的，速度最快，功能简单

2 properties，material，lighting，settexture，pass（通道）

3 没有大小写区分，且不能用分号

4 blending：是用原与目标相混合，（1-源的alpha值）

-----------------7-8surface----------------
1 surfaceoutput

2 input

3 lighting

4 shadow

5 surface shader 就不需要添加pass通道


-----------------38----------------

1 点积：dot(v1,v2) = |v1|*|v2|*cos(a); a是90度cosa为0，a小于90度cosa为负，a大于90度cosa为正；
   意义：cosa = dot(v1,v2) / |v1|*|v2|; 单位向量的 |v1|*|v2为1；所以cosa = dot(v1,v2)
   光的法向量需要两个：顶点指向光源的向量+法向量；根据点积的值可以着色了，光照最强就是a为90度
   则是点积为0；所以点积在0-1之间就可以着色，小于0则不需要着色因为在光的背面了
   目的:确定光照强度

2  叉乘的意义:获得垂直于a,b的法向量，即是垂直于u,v的法向量；有方向的u乘以v向上的法向量；
    cross(v1,v2)

3 a=[a1，a2，a3]=a1i+a2j+a3k；
   b=[b1，b2，b3]=b1i+b2j+b3k；
   则a×b=[a2b3-a3b2，a3b1-a1b3，a1b2-a2b1]。 

4 一般而言，若将向量[a1，a2，a3]表示成四元数a1i+a2j+a3k，两个向量的叉积可以这样计算：
   计算两个四元数的乘积得到一个四元数，并将这个四元数的实部去掉，即为结果   

5  三个顶点：需要用v2-v1,v3-v2 才能得到左手坐标系的法向量

   
-----------------39----------------


                                                                     